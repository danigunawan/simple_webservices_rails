VIDTUT : https://www.youtube.com/watch?v=QojnRc7SS9o
VIDThttps://www.youtube.com/results?sp=EgIIBQ%253D%253D&search_query=restfull+web+services+ruby+on+rails
RAILS FAKER : https://github.com/stympy/faker

FIX GITHUB "Help, I keep getting a 'Permission Denied (publickey)' error when I push!" :
https://gist.github.com/adamjohnson/5682757
=============================================
1. rails new myarticles --api
2. buat database myarticles di phpmyadmin
3. install gem instal mysql2
4. buka gemfile matikan sqlite atau uncomment
tambahkan :

gem 'mysql2'

5. buka database.yml
ubah :

default: &default
  adapter: sqlite3
  pool: <%= ENV.fetch("RAILS_MAX_THREADS") { 5 } %>
  timeout: 5000

development:
  <<: *default
  database: db/development.sqlite3

test:
  <<: *default
  database: db/test.sqlite3

production:
  <<: *default
  database: db/production.sqlite3

### MENJADI :

default: &default
  adapter: mysql2
  username: root
  password:
  pool: <%= ENV.fetch("RAILS_MAX_THREADS") { 5 } %>
  timeout: 5000

development:
  <<: *default
  database: myarticles

test:
  <<: *default
  database: myarticles

production:
  <<: *default
  database: myarticles

6. rails g model Article title:string body:text
7. rails db:migrate
8. buka models/article.rb
tambahkan :

class Article < ApplicationRecord
	validates :title, presence: true
	validates :body, presence: true
end

9. tambahkan gem faker pada gemfile group development
group :development do
 gem 'faker'
end

10. buka seeds.rb, tambahkan dummy data untuk table articles:

5.times do #5 kali data insert 
	Article.create({
			title: Faker::Book.title,
			body: Faker::Lorem.sentence
	})
end

11. rails db:seed

12. buat folder api/v1 di controllers sehingga app/controllers/api/v1
13. buat articles_controller.rb di app/controllers/api/v1/articles_controller.rb
isikan :

module Api
	module V1
		class ArticlesController < ApplicationController
			def index
				articles = Article.order('created_at DESC')
				render json: {status: 'SUCCESS', message: 'Loaded articles', data:articles}, status: :ok
			end
			def show
				articles = Article.find(params[:id])
					render json: {status: 'SUCCESS', message: 'Loaded article', data:articles}, status: :ok
			end
			def create
				articles = Article.new(articles_params)
				
				if articles.save
					render json: {status: 'SUCCESS', message: 'Saved article', data:articles}, status: :ok	
				else					
					render json: {status: 'ERROR', message: 'Article Not Saved', data:articles.errors}, status: :unprocessable_entity
				end
			end
			
			def destroy
				articles = Article.find(params[:id])
				articles.destroy
				render json: {status: 'SUCCESS', message: 'Delete Article', data:articles.errors}, status: :ok
			end

			def update
				articles = Article.find(params[:id])
				if articles.update_attributes(articles_params)
				render json: {status: 'SUCCESS', message: 'Update Article', data:articles}, status: :ok	
				else
					render json: {status: 'ERROR', message: 'Article Not Updated', data:articles.errors}, status: :unprocessable_entity
				end
			end

			private
			def articles_params
				params.permit(:title, :body)
			end			
		end
	end
end

14. buka config/routes.rb tambahkan :

Rails.application.routes.draw do
	namespace 'api' do
		namespace 'v1' do
			resources :articles
		end
	end
end

15. ? rails routes
         Prefix Verb   URI Pattern                Controller#Action
api_v1_articles GET    /api/v1/articles(.:format) api/v1/articles#show
                PATCH  /api/v1/articles(.:format) api/v1/articles#update
                PUT    /api/v1/articles(.:format) api/v1/articles#update
                DELETE /api/v1/articles(.:format) api/v1/articles#destroy
                POST   /api/v1/articles(.:format) api/v1/articles#create

16. download postman versi windows : https://www.getpostman.com/

17. pada get tambahkan :

# index : http://localhost:3000/api/v1/articles 
dari:
def index
 articles = Article.order('created_at DESC')
 render json: {status: 'SUCCESS', message: 'Loaded articles', data:articles}, status: :ok
end

# Show : http://localhost:3000/api/v1/articles/1
dari : 
def show
  articles = Article.find(params[:id])
  render json: {status: 'SUCCESS', message: 'Loaded articles', data:articles}, status: :ok
end

#Create : http://localhost:3000/api/v1/articles

dari :

def create
	articles = Article.new(articles_params)			
	if articles.save
		render json: {status: 'SUCCESS', message: 'Saved article', data:articles}, status: :ok	
		else					
		render json: {status: 'ERROR', message: 'Article Not Saved', data:articles.errors}, status: :unprocessable_entity
		 end
		 end
		  private
		    def articles_params
		     params.permit(:title, :body)
		  end

setting POSTMAN : 
1) Pilih POST
2) Headers
- key : Content-Type
- value : application/json
3) Body (pilih Raw)
isikan array untuk post :

{

"title": "test article one",
	
"body": "this is the body"

}

# DELETE : http://localhost:3000/api/v1/articles/6

dari :

def destroy
  articles = Article.find(params[:id])
  articles.destroy
  render json: {status: 'SUCCESS', message: 'Delete Article', data:articles.errors}, status: :ok
end
private

setting POSTMAN : 
1) PILIH DELETE

# UPDATE : http://localhost:3000/api/v1/articles/5

dari :

def update
	articles = Article.find(params[:id])
	 if articles.update_attributes(articles_params)
	 render json: {status: 'SUCCESS', message: 'Update Article', data:articles}, status: :ok	
	 else
	 render json: {status: 'ERROR', message: 'Article Not Updated', data:articles.errors}, status: :unprocessable_entity
	end
end
private

setting POSTMAN : 
1) Pilih PUT
2) Headers
- key : Content-Type
- value : application/json
3) Body (pilih Raw)
isikan array untuk post :

{

"title": "updated article one",
	
"body": "updated is the body"

}
